grammar plantuml.Puml /*with org.eclipse.xtext.common.Terminals*/ hidden(WS, NEWLINE, SL_COMMENT, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate puml "http://www.eclipse.plantuml/Puml"


// -----------------------------------------------------------------------------------------------
// ----------------------------------------- Root ------------------------------------------------
// -----------------------------------------------------------------------------------------------
UmlDiagram:
	{UmlDiagram}
	('SEQUENCE' umlDiagrams+=SequenceUml)
	| ('COMPONENT' umlDiagrams+=ComponentUml)
	| ('CLASS' umlDiagrams+=ClassUml);

// -----------------------------------------------------------------------------------------------
// ------------------------- Entry Points for different Diagrams ---------------------------------
// -----------------------------------------------------------------------------------------------

// Class diagram
ClassUml:
	{ClassUml}
	'@startuml' umlElements+=(ClassElement)* '@enduml';

// Sequence diagram
SequenceUml:
	{SequenceUml}
	'@startuml' umlElements+=(SequenceElement)* '@enduml';

// Component diagram
ComponentUml:
	{ComponentUml}
	'@startuml' umlElements+=(ComponentElement)* '@enduml';


// -----------------------------------------------------------------------------------------------
// ------------------------------------- Class Diagramm ------------------------------------------
// -----------------------------------------------------------------------------------------------

// Elements of the class diagram
ClassElement:
	Association
	| Classifier
	| NoteClass
	| Enum
	| UmlClassTitle;

Classifier:
	ClassDef | InterfaceDef;

// Class definition
ClassDef:
	{ClassDef}
	(abstract?='abstract')? 'class' (name=PUMLID | name=STRING | longName=STRING 'as' name=PUMLID)
	(color=ColorTag)?
	(inheritance = Inheritance)?
	('{' (contents+=ClassContent | divider+=DividerClass | advancedBody+=STRING)* '}')?;

InterfaceDef:
	{InterfaceDef}
	(abstract?='abstract')? 'interface' (name=PUMLID | name=STRING | longName=STRING 'as' name=PUMLID)
	(color=ColorTag)?
	(inheritance = Inheritance)?
	('{' (contents+=ClassContent | divider+=DividerClass | advancedBody+=STRING)* '}')?;

Inheritance:
	{Inheritance}
	('extends' superTypes+=[Classifier|ClassName] (',' superTypes+=[Classifier|ClassName])*)?
	('implements' implementedInterfaces+=[Classifier|ClassName] (',' implementedInterfaces+=[Classifier|ClassName])*)?;

//Value converter
/*Name:
	(name=PUMLID | name=STRING | longName=STRING 'as' name=PUMLID);*/

// Other possibility to create classes
// TODO: Interferences with other rules
/*ClassWithContent returns Class:
	name = Name ":" classContents+=ClassContent;*/

UmlClassTitle:
	{UmlClassTitle}
	'title' name = (PUMLID | STRING);

// Important contents insPUMLIDe a class
ClassContent:
	Method
	| Attribute
	| DividerClass;

// Class names
ClassName:
	(PUMLID | STRING);

// Enums
Enum:
	{Enum}
	'enum' name=PUMLID (color=ColorTag)?
	('{' enumConstants+=EnumConstant (',' enumConstants+=EnumConstant)* '}')?;

// Constants in Enums
EnumConstant:
	{EnumConstant}
	name=PUMLID;

// Attributes in classes
Attribute:
	{Attribute}
	(static?='{static}')? (abstract?='{abstract}')?
	(visibility=Visibility)?
	((type=PUMLID ('[' (length=INT)? ']')? name=PUMLID)
	|(name=PUMLID (":" type=PUMLID ('[' (length=INT)? ']')?)));

// Methods in classes
Method:
	{Method}
	(static?='{static}')? (abstract?='{abstract}')?
	(visibility=Visibility)?
	(
		(
			(type=PUMLID)?
			('[' (length=INT)? ']')?
			name=(PUMLID)
			'(' (parameters+=Attribute (',' parameters+=Attribute)*)? ')'
		)
		|
		(
			name=(PUMLID)
			'(' (parameters+=Attribute (',' parameters+=Attribute)*)? ')'
			(":" type=PUMLID ('[' (length=INT)? ']')?)
		)
	);

// Associations between classes
Association:
	{Association}
	(classLeft=[Classifier|ClassName]
	infoLeft=STRING?
	=>associationArrow=ARROW
	infoRight=STRING?
	classRight=[Classifier|ClassName])
	(':' label=PUMLID)?;


// Notes for classes
NoteClass:
	{NoteClass}
	'note' direction=NotePosition ('of' noteOf=[Classifier|ClassName])?
	note+=PUMLIDText
	'end note';

// whitspace between words are possible and are showing correctly in the model
PUMLIDText:
	PUMLID+
;

// Color definitions
ColorTag:
	COLOR | HEXCODE;

// DivPUMLIDer to separate parts of a class
// TODO: Problem: ambiguity with association arrow
DividerClass:
	EQUALDIVIDER
	//| DASHEDDIVIDER
	| UNDERLINEDIVIDER
	//| DOTEDDIVIDER
;
EQUALDIVIDER returns DividerClass:
	{EQUALDIVIDER}
	'==' (dividerText+=PUMLIDText '==')?
;

DASHEDDIVIDER returns DividerClass:
	{DASHEDDIVIDER}
	'--' (dividerText+=PUMLIDText '--')?
;

UNDERLINEDIVIDER returns DividerClass:
	{UNDERLINEDIVIDER}
	'__' (dividerText+=PUMLIDText '__')?
;

DOTEDDIVIDER returns DividerClass:
	{DOTEDDIVIDER}
	'..' (dividerText+=PUMLIDText '..')?
;


enum NotePosition:
	LEFT = 'left'
	| RIGHT = 'right'
	| TOP = 'top'
;
// Left types of an association
enum AssociationType:
	BIDIRECTIONAL
	| DIRECTIONALLEFT
	| DIRECTIONALLEFTX
	| DIRECTIONALLEFTO
	| DIRECTIONALRIGHT
	| DIRECTIONALRIGHTX
	| DIRECTIONALRIGHTO
	| INHERITANCELEFT
	| INHERITANCERIGHT
	| AGGREGATIONLEFT
	| AGGREGATIONRIGHT
	| COMPOSITIONLEFT
	| COMPOSITIONRIGHT;

terminal ARROW returns AssociationType:
	('<' | '-' | '.' | 'o' | 'x' | '*')
	('<' | '>' | '-' | '.' | 'o' | 'x' | '*' | '|' | 'l' | 'r' | 'u' | 'd'
	| '[#' ( 'a'..'z' | 'A'..'Z' | '0'..'9' )+ ']'
	)*;
// Visibility for attributes and methods
enum Visibility:
	PROTECTED='#'
	| PRIVATE='-'
	| DEFAULT='~'
	| PUBLIC='+';


// -----------------------------------------------------------------------------------------------
// ----------------------------------- Sequence Diagramm -----------------------------------------
// -----------------------------------------------------------------------------------------------

SequenceElement:
	Participant
	| UseLeft
	| UseRight
	| Skinparam
	| Box
	| Group
	| Activate
	| Alternative
	| Autonumber
	| Legend
	| Title
	| Newpage
	| Note
	| Divider
	| Reference
	| Delay
	| Space
	//| QualifiedName
;


Participant:
	{Participant}
	// TODO das Problem liegt am Konflikt in den Namen --> Daher hat xtext auch bei der PUMLID den ^ als KonfliktvermePUMLIDer
	// google: xtext keyword contextual
	// https://kthoms.wordpress.com/2012/03/15/xtext-content-assist-escape-PUMLIDentifiers-conflicting-with-keywords/#comments
	//	'participant ' (name=TEXT | longname=(STRING | TEXT) ' as ' name=TEXT) NEWLINE
	//	'participant ' {UmlParticipant} name=(TEXT|STRING) ('as ' name=TEXT)? NEWLINE
	('PARTICIPANT' | 'ACTOR' | 'BOUNDARY' | 'CONTROL' | 'ENTITY' | 'DATABASE') (name=PUMLID | longname=(STRING | PUMLID) 'AS'
	name=PUMLID);

QualifiedName:
	{QualifiedName}
	PUMLID;

RequestResponse:
    Request | Response;

Request returns RequestResponse:
    {Request}
    method=RequestMethod url=STRING ('(' requestParam+=RequestParam (',' requestParam+=RequestParam)* ')')?;

RequestParam:
    {RequestParam}
    name=PUMLID ':' value=STRING;

terminal RequestMethod:
    'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';

Response returns RequestResponse:
    {Response}
    code+=INT (',' code+=INT)* ('-' '(' extractParam+=ExtractParam (',' extractParam+=ExtractParam)* ')')?;

ExtractParam:
    {ExtractParam}
    name=PUMLID ':' value=STRING;

Space:
	{Space}
	('||' value=PUMLID '||' | '|||');

Delay:
	{Delay}
	'...' value+=(PUMLID)* '...';

Reference:
	{Reference}
	'REF OVER' ref+=[Participant|PUMLID] (',' ref+=[Participant|PUMLID])*
	(':' value+=(PUMLID)* | value+=(PUMLID)* 'END REF');

Divider:
	{Divider}
	'==' name=PUMLID value+=(PUMLID)* '==';

Note:
	{Note}
	'NOTE' ('LEFT' | 'RIGHT' | 'OVER') ('OF' noteOf=[Participant|PUMLID])?
	value+=(PUMLID)*
	'END NOTE';

Newpage:
	{Newpage}
	'NEWPAGE' value+=(PUMLID | STRING)*;

Title:
	{Title}
	'TITLE' value+=(PUMLID | STRING | WS)*;

Legend:
	{Legend}
	'LEGEND'
	legendEntries+=(STRING | PUMLID | '=' | ':')*
	'ENDLEGEND';

LegendEntries:
	name=PUMLID '=' value+=(PUMLID | STRING)*;

Autonumber:
	{Autonumber}
	'AUTONUMBER' (value=(PUMLID | STRING))?;

Activate returns UmlElementsContainer:
	{Activate}
	'ACTIVATE' activate=[Participant|PUMLID]
	umlElements+=(SequenceElement)*
	('DEACTIVATE' | 'DESTROY') deactivate=[Participant|PUMLID];

Alternative returns UmlElementsContainer:
	{Alternative}
	'ALT' text=STRING
	umlElements+=(SequenceElement)*
	elseBlocks+=(Else)*
	=> 'END';

Else returns UmlElementsContainer:
	{Else}
	'ELSE' text=STRING
	umlElements+=(SequenceElement)*;

Group returns UmlElementsContainer:
	Timing
	| Normal
;

Timing returns UmlElementsContainer:
	{Timing}
	'GROUP' 'sleepAfter(' sleepAfter=INT ')'
	umlElements+=(SequenceElement)*
	=> 'END';	

Normal returns UmlElementsContainer:
	{Group}
	('GROUP' | 'OPT' | 'LOOP' | 'PAR' | 'BREAK' | 'CRITICAL') test+=(PUMLID)*
	umlElements+=(SequenceElement)*
	=> 'END';

Box returns UmlElementsContainer:
	{Box}
	'BOX' name=STRING (color=HEXCODE)?
	umlElements+=(SequenceElement)*
	=> 'END BOX';

Skinparam:
	{Skinparam}
	'SKINPARAM SEQUENCE{'
	skinElements+=(SkinElement)*
	'}';

SkinElement:
	name=PUMLID value=(PUMLID | HEXCODE);

UseLeft returns UmlUse:
	{UseLeft}
	(userOne=[Participant|PUMLID] | '[')
	associationArrow=ARROW
	// ('o<-' | '<-o' | 'o<-o' | '<-' | 'o<--' | '<--o' | 'o<--o' | '<--' | 'x<-' | '<-x' | 'x<-x' | 'x<--' | '<--x' | 'x<--x')
	userTwo=[Participant|PUMLID] (':' (content=RequestResponse | text+=(PUMLID)*))?;

UseRight returns UmlUse:
	{UseRight}
	(userOne=[Participant|PUMLID])
	associationArrow=ARROW
	//('o->' | '->o' | 'o->o' | '->' | 'o-->' | '-->o' | 'o-->o' | '-->' | 'x->' | '->x' | 'x->x' | 'x-->' | '-->x' | 'x-->x')
	(userTwo=[Participant|PUMLID] | ']') (':' (content=RequestResponse | text+=(PUMLID)*))?;

UmlElementsContainer:
	{UmlElementsContainer}
	umlElements+=(SequenceElement)*;

NamedElement:
	{NamedElement}
	name=PUMLID;

UmlUse:
	{UmlUse};

// -----------------------------------------------------------------------------------------------
// ----------------------------------- Component Diagram -----------------------------------------
// -----------------------------------------------------------------------------------------------

ComponentElement:
	Component
	| Interface
	| Link
	| Title;

Link:
	linkOne=[NamedElement|PUMLID]
	/**
	 * Long list of possible clauses due to misunderstanding within the parser.
	 * If you would split the detection into multiple ones this is not be detected in the right way.
	 * Example:
	 * 		('<-' | '-') (d)? ('-' | '->')
	 * does not work because if the parser is already in PUMLID detection due to previous (':' text+=(PUMLID)*)?
	 * it is not possible to detect the upper clause for sure.
	 */
	associationArrow=ARROW
	linkTwo=[NamedElement|PUMLID] (':' text+=(PUMLID)*)?;

Interface returns NamedElement:
	{Interface} ('(' name=PUMLID nameExtension+=(PUMLID)* ')' | 'INTERFACE' description=STRING) ('AS' name=PUMLID)? (color=ColorTag)?;

Component returns NamedElement:
	{Component} ('[' name=PUMLID nameExtension+=(PUMLID | WS)* ']' | 'COMPONENT' description=STRING) ('AS' name=PUMLID)? (color=ColorTag)?;

// -----------------------------------------------------------------------------------------------
// ------------------------------- Shared Rules and Terminals ------------------------------------
// -----------------------------------------------------------------------------------------------
terminal COLOR:
	"#" ('AliceBlue'|'AntiqueWhite'|'Aqua'|'Aquamarine'|'Azure'|'Beige'|'Bisque'|'Black'|'BlanchedAlmond'
	|'Blue'|'BlueViolet'|'Brown'|'BurlyWood'|'CadetBlue'|'Chartreuse'|'Chocolate'|'Coral'
	|'CornflowerBlue'|'Cornsilk'|'Crimson'|'Cyan'|'DarkBlue'|'DarkCyan'|'DarkGoldenRod'|'DarkGray'
	|'DarkGreen'|'DarkGrey'|'DarkKhaki'|'DarkMagenta'|'DarkOliveGreen'|'DarkOrchid'|'DarkRed'
	|'DarkSalmo'|'DarkSeaGreen'|'DarkSlateBlue'|'DarkSlateGray'|'DarkSlateGrey'|'DarkTurquoise'
	|'DarkViolet'|'Darkorange'|'DeepPink'|'DeepSkyBlue'|'DimGray'|'DimGrey'|'DodgerBlue'
	|'FireBrick'|'FloralWhite'|'ForestGreen'|'Fuchsia'|'Gainsboro'|'GhostWhite'|'Gold'
	|'GoldenRod'|'Gray'|'Green'|'GreenYellow'|'Grey'|'HoneyDew'|'HotPink'|'IndianRed'
	|'Indigo'|'Ivory'|'Khaki'|'Lavender'|'LavenderBlush'|'LawnGreen'|'LemonChiffon'
	|'LightBlue'|'LightCoral'|'LightCyan'|'LightGoldenRodYellow'|'LightGray'|'LightGreen'
	|'LightGrey'|'LightPink'|'LightSalmon'|'LightSeaGreen'|'LightSkyBlue'|'LightSlateGray'
	|'LightSlateGrey'|'LightSteelBlue'|'LightYellow'|'Lime'|'LimeGreen'|'Linen'|'Magenta'
	|'Maroon'|'MediumAquaMarine'|'MediumBlue'|'MediumOrchid'|'MediumPurple'|'MediumSeaGreen'
	|'MediumSlateBlue'|'MediumSpringGreen'|'MediumTurquoise'|'MediumVioletRed'
	|'MidnightBlue'|'MintCream'|'MistyRose'|'Moccasin'|'NavajoWhite'|'Navy'|'OldLace'
	|'Olive'|'OliveDrab'|'OrangeRed'|'Orchid'|'PaleGoldenRod'|'PaleGreen'
	|'PaleTurquoise'|'PaleVioletRed'|'PapayaWhip'|'PeachPuff'|'Peru'|'Pink'|'Plum'
	|'PowderBlue'|'Purple'|'Red'|'RosyBrown'|'RoyalBlue'|'SaddleBrown'
	|'Salmon'|'SandyBrown'|'SeaGreen'|'Sienna'|'Silver'|'SkyBlue'|'SlateBlue'
	|'SlateGray'|'SlateGrey'|'Snow'|'SpringGreen'|'SteelBlue'|'Tan'|'Teal'|'Thistle'
	|'Tomato'|'Turquoise'|'Violet'|'Wheat'|'White'|'WhiteSmoke'|'Yellow'|'YellowGreen');

// Hexadecimal colors
terminal HEXCODE:
	"#"
	('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')
	('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9');

// Terminal to detect methods
/*terminal METHID:
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9')
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	"("
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	")";
*/
// Integer
terminal INT returns ecore::EInt:
	'0'..'9'+;

// String
terminal STRING:
	'"' ('\\' . | !('\\' | '"'))* '"';

/*Arrow:
	type=ARROWTYPE;*/

// Tab
terminal WS:
	' ' | '\t';

// Newline
terminal NEWLINE:
	'\r'? '\n';

// ID
terminal PUMLID:
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '\"\"' | '//' | '\\' | '*' | '?')
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '\"\"' | '//' | '\\' | ':' | '*' | '?')*;

// Single line comment
terminal SL_COMMENT:
	"'" !('\n' | '\r')* ('\r'? '\n')?;

// TODO: Does not work
// Multiline comments
terminal ML_COMMENT:
	"//'" ('\r'? '\n')* "'//" ;
