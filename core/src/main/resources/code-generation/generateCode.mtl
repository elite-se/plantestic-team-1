[comment encoding = UTF-8 /]
[module generateCode('http://www.example.org/RestAssured')]

[template public generateTestScenario(testScenario : TestScenario) post(trim())]
[comment @main /]
[file ('Test'.concat(testScenario.testScenarioName.concat('.java')), false, 'UTF-8')]
import com.moandjiezana.toml.Toml;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.apache.commons.text.StringSubstitutor;
import org.hamcrest.collection.IsIn;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class [ 'Test'.concat(testScenario.testScenarioName) /] {

	Map<String, Object> paramsMap = new HashMap();
	ScriptEngine engine;
	StringSubstitutor substitutor;
    String tomlFilePath = null;

    public void setConfigFileURL(URL configFileUrl) {
        this.tomlFilePath = configFileUrl.getFile();
    }

    public void setConfigFilePath(String configFilePath) {
        this.tomlFilePath = configFilePath;
    }

	@BeforeEach
	public void setupConfig() throws FileNotFoundException {
		try {
            if (tomlFilePath == null) {
                final String defaultConfigPath = "[ testScenario.testScenarioName /].toml";
                URL url = Thread.currentThread().getContextClassLoader().getResource(defaultConfigPath);
                if (url == null) {
                    throw new FileNotFoundException(defaultConfigPath + " was not found!");
                }
                tomlFilePath = url.getFile();
            }
			paramsMap = unnestTomlMap("", new Toml().read(new File(tomlFilePath)).toMap());
			substitutor = new StringSubstitutor(paramsMap);
			engine = new ScriptEngineManager().getEngineByName("JavaScript");
		} catch(Throwable throwable) {
			System.out.println("An Error occured, possible during reading the TOML config file: " + throwable.getMessage());
			throw throwable;
		}
	}

    @Test
	public void test() throws Exception {
	[for (testRoundtrip : TestRoundtrip | testScenario.testroundtrip) separator('\n\n') ]
		[if (testRoundtrip.precondition->isEmpty())][testRoundtrip.generateTestRoundtrip()/][/if]
		[if (testRoundtrip.precondition->notEmpty())]
		if(eval("[testRoundtrip.precondition/]")) {
			[testRoundtrip.generateTestRoundtrip()/]
		}
		[/if]
	[/for]
	}

    public Map<String, Object> requests() {
        try {
            setupConfig();
        }
        catch(Exception e) {
            System.out.println("Config was not setup successfully");
        }

        Map<String, Object> requests = new HashMap();
        Map<String, String> variables = new HashMap();  // variables are filled using the response specification
    [for (testRoundtrip : TestRoundtrip | testScenario.testroundtrip) separator('\n\n') ]
        [let rtname : TestRoundtrip = testRoundtrip.testRoundtripName]
        [let rec : RequestSpecification = testRoundtrip.requestspecification.receiver]
        if (!requests.containsKey("[rec/]")) {
            Map<String, String> [rec/]_[rtname/] = new HashMap();
            [rec/]_[rtname/].put("method", subst("[testRoundtrip.requestspecification.method/]"));
            [rec/]_[rtname/].put("url", subst("[testRoundtrip.requestspecification.url/]"));
            [for (requestDatum : RequestDatum | testRoundtrip.requestspecification.requestdatum) separator('\n\n') ]
            [rec/]_[rtname/].put("[requestDatum.variableName/]", subst("[requestDatum.value/]"));
            [/for]
            requests.put("[rec/]", [rec/]_[rtname/]);
        }
        [/let]
        [/let]
        [for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum) separator('\n\n') ]
        variables.put("[responseDatum.variableName/]", "[responseDatum.xPath/]");
        [/for]
    [/for]
        return requests;
    }

    public String reformat(String s) {
        if (s.contains("$")) {
            System.out.println("Reformat was called for " + s);
            return paramsMap.get(s).toString();
        }
        return s;
    }

	public Map<String, Object> expectations() {
	    Map<String, Object> expectations = new HashMap();
	    /*
	[for (testRoundtrip : TestRoundtrip | testScenario.testroundtrip) separator('\n\n') ]
	    [let rec : RequestSpecification = testRoundtrip.requestspecification.receiver]
        Map<String, String> [rec/] = new HashMap();
        [for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum) separator('\n\n') ]
        [rec/].put("[responseDatum.variableName/]", "[responseDatum.xPath/]");
        [/for]
        expectations.put("[rec/]", [rec/]);
        [/let]
    [/for]
        */
        return expectations;
	}

    /// Helper method to make to templating in string variables above more clean.
	private String subst(String source) {
	    assert substitutor != null;
	    return substitutor.replace(source);
	}

    // now unnecessary!
	private String urlSubst(String url) {
	    String \u005B\u005D parts = url.split("/");
	    String result = "";
	    System.out.println(url);
	    for (String part: parts) {
	        System.out.println(result);
	        if (part.length() == 0) continue;
	            result += "/" + subst(part);
	    }
	    System.out.println(result);
	    return result;
	}

	/// Helper method to make evaluation of conditions more clean.
	private boolean eval(String condition) throws ScriptException {
	    assert engine != null;
	    // First, run the templating engine over the condition.
	    // This is the whole reason why we do this "evaluate a JS string at runtime" at all.
	    String substCondition = subst(condition);
	    // Second, we can simply pipe the string through the JavaScript engine and get a result.
	    return (Boolean) engine.eval(substCondition);
	}

    /// Helper method to flatten the tree-like structure of a TOML file.
    /// Here, we use the path of an item as the key and the item itself as the value.
    /// The path of an item separated by dots, e.g. "A.B.item".
	private static Map<String, Object> unnestTomlMap(String prefix, Map<String, Object> tree) {
        Map<String, Object> resultMap = new HashMap<>();
        for (Map.Entry<String, Object> entry : tree.entrySet()) {
            String identifierPath = prefix + entry.getKey();
            if(entry.getValue() instanceof Map){
                resultMap.putAll(unnestTomlMap(identifierPath + ".", (Map<String, Object>)entry.getValue()));
            } else {
                resultMap.put(identifierPath, entry.getValue());
            }
        }
        return resultMap;
	}
}
[/file]
[/template]

[template private generateTestRoundtrip(testRoundtrip : TestRoundtrip) post(trim())]
	[if (testRoundtrip.requestspecification.requestdatum->notEmpty())]
[testRoundtrip.requestspecification.generadeAddRequestParams()/]
	[/if]
Response [testRoundtrip.testRoundtripName/] = RestAssured.given()
        [testRoundtrip.requestspecification.generateGivenPart()/]
    .when()
        [testRoundtrip.requestspecification.generateWhenPart()/]
    .then()
        [testRoundtrip.responsespecification.generateThenPart()/];
[if (testRoundtrip.responsespecification.responsedatum->notEmpty())]
[testRoundtrip.generateExtractions()/]

	[/if]
[/template]

[template private generadeAddRequestParams(requestSpecification : RequestSpecification)]
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
paramsMap.put("[requestDatum.variableName/]", "[requestDatum.value/]");
		[/for]
	[/if]
[/template]

[template private generateGivenPart(requestSpecification : RequestSpecification) post(trim())]
.auth().basic(subst("${[requestSpecification.receiver/].username}"), subst("${[requestSpecification.receiver/].password}"))
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
.param("[requestDatum.variableName/]", subst("${[requestDatum.variableName/]}"))
		[/for]
	[/if]
[/template]

[template private generateWhenPart(requestSpecification : RequestSpecification) post(trim())]
	.[requestSpecification.method.toLower()/](subst("${[requestSpecification.receiver/].path}") + subst("[requestSpecification.url/]"))
[/template]

[template private generateThenPart(responseSpecification : ResponseSpecification) post(trim())]
	.assertThat()
    [responseSpecification.generateExpectStatusCode()/][if (responseSpecification.bodymatchergroup->notEmpty())]
        [responseSpecification.generateExpectations()/]
    [/if]
	.and().extract().response()
[/template]

[template private generateExpectStatusCode(responseSpecification : ResponseSpecification) post(trim())]
	[if (responseSpecification.statusmatcher->notEmpty())]
		[if (responseSpecification.statusmatcher.oclIsTypeOf(IsIn))]
			[let statusCode : IsIn = responseSpecification.statusmatcher.oclAsType(IsIn)]
.statusCode(IsIn.isIn(Arrays.asList([for (val : String | statusCode.value) separator (', ')][val/][/for])))
			[/let]
		[/if]
	[/if]
[/template]

[template private generateExpectations(responseSpecification : ResponseSpecification) post(trim())]
	[for (matcher : BodyMatcher | responseSpecification.bodymatchergroup)]
		[if (matcher.oclIsTypeOf(HasXPath))]
			[let bodyXPath : HasXPath = matcher.oclAsType(HasXPath)].body(hasXPath([bodyXPath.xPath/]))[/let]
		[/if]
		[if (matcher.oclIsTypeOf(IsIn))]
			[let bodyIsIn : IsIn = matcher.oclAsType(IsIn)][/let]
		[/if]
	[/for]
[/template]

[template private generateExtractions(testRoundtrip : TestRoundtrip) post(trim())]
	[for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum)]
paramsMap.put("[responseDatum.variableName/]", [testRoundtrip.testRoundtripName/].jsonPath().getString("[responseDatum.xPath/]"));
	[/for]
[/template]
