[comment encoding = UTF-8 /]
[module generateCode('http://www.example.org/RestAssured')]

[template public generateTestScenario(testScenario : TestScenario) post(trim())]
[comment @main /]
[file ('Test_'.concat(testScenario.testScenarioName.concat('.java')), false, 'UTF-8')]
import com.moandjiezana.toml.Toml;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.filter.Filter;
import io.restassured.filter.log.ErrorLoggingFilter;
import com.atlassian.oai.validator.restassured.OpenApiValidationFilter;
import org.apache.commons.text.StringSubstitutor;
import org.hamcrest.collection.IsIn;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.*;

public class [ 'Test_'.concat(testScenario.testScenarioName) /] {

	Map<String, Object> paramsMap = new HashMap();
	ScriptEngine engine;
	StringSubstitutor substitutor;
    String tomlFilePath = null;

    public void setConfigFileURL(URL configFileUrl) {
        this.tomlFilePath = configFileUrl.getFile();
    }

    public void setConfigFilePath(String configFilePath) {
        this.tomlFilePath = configFilePath;
    }

	@BeforeEach
	public void setupConfig() throws FileNotFoundException {
		try {
            if (tomlFilePath == null) {
                final String defaultConfigPath = "[ testScenario.testScenarioName /].toml";
                URL url = Thread.currentThread().getContextClassLoader().getResource(defaultConfigPath);
                if (url == null) {
                    throw new FileNotFoundException(defaultConfigPath + " was not found!");
                }
                tomlFilePath = url.getFile();
            }
			paramsMap = unnestTomlMap("", new Toml().read(new File(tomlFilePath)).toMap());
			substitutor = new StringSubstitutor(paramsMap);
			engine = new ScriptEngineManager().getEngineByName("JavaScript");
		} catch(Throwable throwable) {
			System.out.println("An Error occured, possible during reading the TOML config file: " + throwable.getMessage());
			throw throwable;
		}
	}

    @Test
	public void test() throws Exception {
	[for (testRoundtrip : TestRoundtrip | testScenario.testroundtrips) separator('\n\n') ]
		[if (testRoundtrip.precondition->isEmpty())][testRoundtrip.generateTestRoundtrip()/][/if]
		[if (testRoundtrip.precondition->notEmpty())]
		if(eval("[testRoundtrip.precondition/]")) {
			[testRoundtrip.generateTestRoundtrip()/]
		}
		[/if]
	[/for]
	}

    public Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, String>>>>>> testingSpecification() throws ScriptException {
        try {
            setupConfig();
        }
        catch(Exception e) {
            System.out.println("Config was not setup successfully");
        }

        Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, String>>>>>> specs = new HashMap();
        Map<String, Map<String, Map<String, Map<String, Map<String, String>>>>> actor;
        Map<String, Map<String, Map<String, Map<String, String>>>> url;
        Map<String, Map<String, Map<String, String>>> method;
        Map<String, Map<String, String>> roundtrip;
        Map<String, String> status;
        Map<String, String> requests;
        Map<String, String> responses;
        String actorName, urlName, methodName, roundtripName;

        [for (testRoundtrip : TestRoundtrip | testScenario.testroundtrips) separator('\n\n') ]
        [if (testRoundtrip.precondition->notEmpty())]
        if(eval("[testRoundtrip.precondition/]")) {
        [/if]
        [let rec : RequestSpecification = testRoundtrip.requestspecification.receiver]
        actorName = "[rec/]";
        if (!specs.containsKey(actorName)) {
            specs.put(actorName, new HashMap<String, Map<String, Map<String, Map<String, Map<String, String>>>>>());
        }
        actor = specs.get("[rec/]");
        urlName = subst("[testRoundtrip.requestspecification.url/]");
        if (!actor.containsKey(urlName)) {
            actor.put(urlName, new HashMap<String, Map<String, Map<String, Map<String, String>>>>());
        }
        url = actor.get(urlName);
        methodName = subst("[testRoundtrip.requestspecification.method/]");
        if (!url.containsKey(methodName)) {
            url.put(methodName, new HashMap<String, Map<String, Map<String, String>>>());
        }
        method = url.get(methodName);

        roundtripName = "[testRoundtrip.testRoundtripName/]"; // this is always unique
        method.put(roundtripName, new HashMap<String, Map<String, String>>());
        roundtrip = method.get(roundtripName);
        roundtrip.put("status", new HashMap<String, String>());
        roundtrip.put("requests", new HashMap<String, String>());
        roundtrip.put("responses", new HashMap<String, String>());

        status = roundtrip.get("status");
        [let statusCode : IsIn = testRoundtrip.responsespecification.statusmatcher.oclAsType(IsIn)]
        [for (val : String | statusCode.value)]
        status.put("[val/]", "[val/]");
        [/for]
        [/let]

        requests = roundtrip.get("requests");
        [for (requestDatum : RequestDatum | testRoundtrip.requestspecification.requestdatum)]
        requests.put("[requestDatum.variableName/]", subst("[requestDatum.value/]"));
        [/for]

        responses = roundtrip.get("responses");
        [for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum)]
        responses.put("[responseDatum.variableName/]", "[responseDatum.xPath/]");
        [/for]
        [/let]
        [if (testRoundtrip.precondition->notEmpty())]
        }
        [/if]
        [/for]


        return specs;
    }

    /// Helper method to make to templating in string variables above more clean.
	private String subst(String source) {
	    assert substitutor != null;
	    return substitutor.replace(source);
	}

	/// Helper method to make evaluation of conditions more clean.
	private boolean eval(String condition) throws ScriptException {
	    assert engine != null;
	    // First, run the templating engine over the condition.
	    // This is the whole reason why we do this "evaluate a JS string at runtime" at all.
	    String substCondition = subst(condition);
	    // Second, we can simply pipe the string through the JavaScript engine and get a result.
	    return (Boolean) engine.eval(substCondition);
	}

	/// Helper method to determine the necessary filter for response validation.
	/// If a Swagger file is specified, the filter returned checks the response format.
	/// If not, an ErrorLoggingFilter is returned which does nothing but printing errors. Granted, kinda hacky.
	private Filter responseFilter(String swaggerKey) {
        if (paramsMap.containsKey(swaggerKey))
            return new OpenApiValidationFilter(subst("${" + swaggerKey + "}"));
        else
            return new ErrorLoggingFilter();
	}

    /// Helper method to flatten the tree-like structure of a TOML file.
    /// Here, we use the path of an item as the key and the item itself as the value.
    /// The path of an item separated by dots, e.g. "A.B.item".
	private static Map<String, Object> unnestTomlMap(String prefix, Map<String, Object> tree) {
        Map<String, Object> resultMap = new HashMap<>();
        for (Map.Entry<String, Object> entry : tree.entrySet()) {
            String identifierPath = prefix + entry.getKey();
            if(entry.getValue() instanceof Map){
                resultMap.putAll(unnestTomlMap(identifierPath + ".", (Map<String, Object>)entry.getValue()));
            } else {
                resultMap.put(identifierPath, entry.getValue());
            }
        }
        return resultMap;
	}

    ///Check if Expectations from Toml File equal the actual value that is returned from roundtrip
	private void checkExpectations(String roundtrip){
        Map<String, Object> roundtripChecksMap = (Map<String, Object>) new Toml().read(new File(tomlFilePath)).toMap().get("RoundtripChecks");
        if(roundtripChecksMap != null){
            Map<String, Object> roundtripMap = (Map<String, Object>) roundtripChecksMap.get(roundtrip);
            for(String key : roundtripMap.keySet()){
                Object value = roundtripMap.get(key);
                if(value == null){
                    continue;
                }
                if(value.getClass().equals(String.class)){
                    String expected = (String) value;
                    String message = "Assert failed.\nExpected value was: " + expected + ", but actually got: " + paramsMap.get(key);
                    assertEquals(message, expected, paramsMap.get(key));
                }
                else if(value.getClass().isArray()){
                    Object['[]'/] expected = (Object['[]'/]) value;
                    assertArrayEquals(expected, (Object ['[]'/]) paramsMap.get(key));
                }
            }
        }
    }
}
[/file]
[/template]

[template private generateTestRoundtrip(testRoundtrip : TestRoundtrip) post(trim())]
	[if (testRoundtrip.requestspecification.requestdatum->notEmpty())]
[testRoundtrip.requestspecification.generateAddRequestParams()/]
	[/if]
Response [testRoundtrip.testRoundtripName/] = RestAssured.given()
        [testRoundtrip.requestspecification.generateGivenPart()/]
    .when()
        [testRoundtrip.requestspecification.generateWhenPart()/]
    .then()
        [testRoundtrip.responsespecification.generateThenPart()/];
[if (testRoundtrip.responsespecification.responsedatum->notEmpty())]
[testRoundtrip.generateExtractions()/]
checkExpectations("[testRoundtrip.testRoundtripName/]");
	[/if]
	[if (testRoundtrip.timing.sleepAfter > 0)]
Thread.sleep([testRoundtrip.timing.sleepAfter/]);	
	[/if]
[/template]

[template private generateAddRequestParams(requestSpecification : RequestSpecification)]
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
paramsMap.putIfAbsent("[requestDatum.variableName/]", "[requestDatum.value/]");  // put only if the key doesn't exist to avoid infinite loops
		[/for]
	[/if]
[/template]

[template private generateGivenPart(requestSpecification : RequestSpecification) post(trim())]
.auth().basic(subst("${[requestSpecification.receiver/].username}"), subst("${[requestSpecification.receiver/].password}"))
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
.queryParam("[requestDatum.variableName/]", subst("${[requestDatum.variableName/]}"))
		[/for]
	[/if]
.filter(responseFilter("[requestSpecification.receiver/].url"))
[/template]

[template private generateWhenPart(requestSpecification : RequestSpecification) post(trim())]
	.[requestSpecification.method.toLower()/](subst("${[requestSpecification.receiver/].path}") + subst("[requestSpecification.url/]"))
[/template]

[template private generateThenPart(responseSpecification : ResponseSpecification) post(trim())]
	.assertThat()
    [responseSpecification.generateExpectStatusCode()/][if (responseSpecification.bodymatchergroup->notEmpty())]
        [responseSpecification.generateExpectations()/]
    [/if]
	.and().extract().response()
[/template]

[template private generateExpectStatusCode(responseSpecification : ResponseSpecification) post(trim())]
	[if (responseSpecification.statusmatcher->notEmpty())]
		[if (responseSpecification.statusmatcher.oclIsTypeOf(IsIn))]
			[let statusCode : IsIn = responseSpecification.statusmatcher.oclAsType(IsIn)]
.statusCode(IsIn.isIn(Arrays.asList([for (val : String | statusCode.value) separator (', ')][val/][/for])))
			[/let]
		[/if]
	[/if]
[/template]

[template private generateExpectations(responseSpecification : ResponseSpecification) post(trim())]
	[for (matcher : BodyMatcher | responseSpecification.bodymatchergroup)]
		[if (matcher.oclIsTypeOf(HasXPath))]
			[let bodyXPath : HasXPath = matcher.oclAsType(HasXPath)].body(hasXPath([bodyXPath.xPath/]))[/let]
		[/if]
		[if (matcher.oclIsTypeOf(IsIn))]
			[let bodyIsIn : IsIn = matcher.oclAsType(IsIn)][/let]
		[/if]
	[/for]
[/template]

[template private generateExtractions(testRoundtrip : TestRoundtrip) post(trim())]
	[for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum)]
paramsMap.put("[responseDatum.variableName/]", [testRoundtrip.testRoundtripName/].jsonPath().getString("[responseDatum.xPath/]"));
	[/for]
[/template]
